# 建造者模式

## 背景
创建一个产品，可能需要为其设置多个参数，比如对游戏角色进行设计，不同类型的游戏角色，其性别、脸型、服装、发型等外部特性都有所差异，例如“天使”拥有美丽的面容和披肩的长发，并身穿一袭白裙；而“恶魔”极其丑陋，留着光头并穿一件刺眼的黑衣，而且随着该游戏的升级将不断增加新的角色。

这些初始化代码通常深藏于一个包含众多参数且让人基本看不懂的构造函数中； 甚至还有更糟糕的情况，
那就是这些代码散落在客户端代码的多个位置，很不利于代码维护。

## 定义
建造者模式（Builder Pattern）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。
建造者模式模式将对象构造代码从产品类中抽取出来， 并将其放在一个名为生成器的独立对象中。

```uml
interface Builder {
    + buildPartA()
    + buildPartB()
    + buildPartC()
    + getResult()
}

class ConcreteBuilderA implements Builder {
    - result: 
    + buildPartA()
    + buildPartB()
    + buildPartC()
    + getResult()
}

class ConcreteBuilderB implements Builder {
    + buildPartA()
    + buildPartB()
    + buildPartC()
    + getResult()
}

```

## 实现