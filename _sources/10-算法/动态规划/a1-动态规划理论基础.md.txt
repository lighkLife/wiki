# 动态规划理论基础

## 问题分类

- 动态基础
- 背包问题
- 打家劫舍
- 股票问题
- 子序列问题

![alt text](image.png)

## 解题步骤

1. dp 数组的定义以及其下标的含义（dp[i], dp[i][j]）
2. 找出递推公式（找规律）
3. dp 数组如何初始化（结合前两步得出）
4. 遍历顺序（比如从前往后遍历或相反，再比如背包问题，先遍历背包，再遍历物品）
5. 打印 dp 数组（和自己的手动推导结果进行对比，出问题后方便排查）

## Fibonacci

[509. 斐波那契数](https://leetcode.cn/problems/fibonacci-number/description/)

斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：

```
F(0) = 0，F(1) = 1
F(n) = F(n - 1) + F(n - 2)，其中 n > 1
```

给定 n ，请计算 F(n) 。

使用五部曲解答：

1. `dp` 数组含义： `dp[i]` 代表第 i 个 Fibonacci 数
2. 递推公式：`dp[i] = dp[i-1] + dp[i-2]`
3. `dp` 数组初始化： `dp[0] = 1`, `dp[1] = 1`
4. 遍历顺序： 由递推公式可知，需要从前往后
5. 打印 `dp` 数组

```Java
    public int fib(int n) {
        if (n <= 1) return n;           
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for (int index = 2; index <= n; index++){
            dp[index] = dp[index - 1] + dp[index - 2];
        }
        return dp[n];
    }

    public int fib(int n) {
        if (n < 2) return n;
        int a = 0, b = 1, c = 0;
        for (int i = 1; i < n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
```

## 爬台阶

[70. 爬楼梯](https://leetcode.cn/problems/climbing-stairs/description/)

假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

五部曲解答：

1. dp 数组含义： dp[i] 代表达到 i 阶，有 dp[i] 种方法
2. 递推公式：只能从前两阶，或前一阶抵达当前阶，所以 `dp[i] = dp[i-1] + dp[i-2]`
3. dp 数组初始化：`dp[1] = 1`, `dp[2] = 2`
4. 遍历顺序： 从前往后
5. 打印 dp 数组

## 最小花费爬台阶

[746. 使用最小花费爬楼梯](https://leetcode.cn/problems/min-cost-climbing-stairs/description/)

给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。

你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。

五部曲解答：

1. dp 数组含义：dp[i] 到达 i 位置花费为 dp[i]
2. 递推公式： `dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])`
3. dp 数组初始化:  `dp[0]=0`,  `dp[1]=0`
4. 遍历顺序： 从前往后
5. 打印dp 数组

代码：

```Java
    public int minCostClimbingStairs(int[] cost) {
        int len = cost.length;
        int[] dp = new int[len + 1];

        // 从下标为 0 或下标为 1 的台阶开始，因此支付费用为0
        dp[0] = 0;
        dp[1] = 0;

        // 计算到达每一层台阶的最小费用
        for (int i = 2; i <= len; i++) {
            dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
        }

        return dp[len];
    }
```
